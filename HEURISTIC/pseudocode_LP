Create an Initial Solution:
    Sort classes by their duration in descending order (longest classes first).
    Create an empty list to store assignments and a tracking list to keep track of room usage for every time slot.
    For each class in the sorted list:
    Try all possible starting time slots:
        For each room:
            Check if the room is big enough for the class and if no other class overlaps in time (for both the teacher and room).
            If it is valid, assign the class to this time slot and room.
            Mark the room and time slots as occupied.
            Move to the next class once assigned.

Explore Neighboring Solutions:
    For each class already assigned:
        Try moving the class to a different time slot within the same room.
        Try moving the class to a different room at a different time slot.
        Try swapping the time slot and room assignments with another class (both assignments remain valid).
    For each neighbor generated:
        Test if the neighbor improves the current solution.
        Randomly select a neighbor if no improvement is found.
        Attempt to add unassigned classes to the neighbor.
    Generate a list of all possible valid changes (neighbors) from the current solution.

Evaluate a Solution:
    Count how many classes have been successfully scheduled without conflicts.
    Use this count as the "score" of the solution.

Local Search Algorithm:
    Start with the initial solution and calculate its score.
    Keep track of the best solution found so far and its score.
    Repeat the following steps until a certain number of iterations or no further improvement is possible:
        Generate neighboring solutions based on the current solution.
        Select a small number (e.g., up to 5) of the best neighbors with the highest scores.
        Randomly pick one of these top neighbors as the new solution.
        If the new solution has a better score, update the current solution and reset the "no improvement" counter.
        If no improvement, increase the counter.
        Occasionally attempt to add unassigned classes to the current solution.
    After completing all iterations, save the best solution found during the process.
